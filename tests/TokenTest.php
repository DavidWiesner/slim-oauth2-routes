<?php

namespace ChadicusTest\Slim\OAuth2\Routes;

use Chadicus\Slim\OAuth2\Routes\Token;
use OAuth2\GrantType\ClientCredentials;
use OAuth2\Server;
use OAuth2\Storage\Memory;
use Slim\App;

/**
 * Unit tests for the \Chadicus\Slim\OAuth2\Routes\Token class.
 *
 * @coversDefaultClass \Chadicus\Slim\OAuth2\Routes\Token
 * @covers ::<private>
 * @covers ::__construct
 */
final class TokenTest extends \BasicSlimTestCase {
	private $storage;
	private $server;

	protected function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->storage = new Memory(
				[
						'client_credentials' => [
								'testClientId' => [
										'client_id' => 'testClientId',
										'client_secret' => 'testClientSecret',
								],
						],
				]
		);

		$this->server = new Server(
				$this->storage,	['access_lifetime' => 3600,	],
				[ new ClientCredentials($this->storage) ]
		);
	}


	/**
	 * Verify basic behavior of __invoke()
	 *
	 * @test
	 * @covers ::__invoke
	 *
	 * @return void
	 */
	public function invoke() {

		$json = json_encode(
				[
						'client_id' => 'testClientId',
						'client_secret' => 'testClientSecret',
						'grant_type' => 'client_credentials',
				]
		);

		$contentType = 'application/json';
		$path = '/token';

		$slim = new App();
		$slim->post($path, new Token($slim, $this->server));
		$response = self::runAppRequest($slim, $path, 'POST', false, [ ], $json, $contentType);
		$response->getBody()->rewind();

		$this->assertSame(200, $response->getStatusCode());
		$actual = json_decode($response->getBody()->getContents(), true);

		$this->assertSame(
				[
						'access_token' => $actual['access_token'],
						'expires_in' => 3600,
						'token_type' => 'Bearer',
						'scope' => null,
				],
				$actual
		);
	}


	/**
	 * Verify basic behavior of register
	 *
	 * @test
	 * @covers ::register
	 *
	 * @return void
	 */
	public function register() {
		$storage = new Memory([ ]);
		$server = new Server($storage, [ ], [ ]);

		$slim = new App();

		Token::register($slim, $server);

		$route = $slim->getContainer()['router']->getNamedRoute('token');

		$this->assertInstanceOf('\Slim\Route', $route);
		$this->assertInstanceOf('\Chadicus\Slim\OAuth2\Routes\Token', $route->getCallable());
		$this->assertSame([ 'POST' ], $route->getMethods());
	}

	public function testNoGrantType() {
		$json = json_encode(
				[
						'client_id' => 'testClientId',
						'client_secret' => 'testClientSecret',
				]
		);

		$contentType = 'application/json';
		$path = '/token';

		$slim = new App();
		$slim->post($path, new Token($slim, $this->server));
		$response = self::runAppRequest($slim, $path, 'POST', false, [ ], $json, $contentType);
		$response->getBody()->rewind();

		$this->assertSame(400, $response->getStatusCode());
		$this->assertNotEquals("", (string)$response->getBody());
		$actual = json_decode($response->getBody()->getContents(), true);

		$this->assertSame(
				[
						'access_token' => $actual['access_token'],
						'expires_in' => 3600,
						'token_type' => 'Bearer',
						'scope' => null,
				],
				$actual
		);

	}
}
